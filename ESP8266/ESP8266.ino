/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/eb0d8c22-81cb-429f-821c-4561abd3ec33 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float distance;
  float temperature;
  CloudSwitch corridorLights;
  CloudSwitch doorLock;
  CloudSwitch lightning;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
// dht
#define DHTPIN D3     
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
// lcd
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

const int trigPin = 12;
const int echoPin = 14;
//ultrasonic
//define sound velocity in cm/uS
#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701

long duration;
//leds
int LED1 = 13;
int LED2 = 15;
//servo
#include <Servo.h>
Servo servo;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  Serial.println(F("DHT11 test!"));
  dht.begin();
  dht.begin();  
  lcd.begin(16,2);
  lcd.init();                     
  lcd.backlight();
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  servo.attach(2); //D4
  servo.write(0);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  float h = dht.readHumidity();
  temperature = dht.readTemperature();
 
  if (isnan(h) || isnan(temperature)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  lcd.setCursor(0, 0);
  lcd.print(F("Humidity: "));
  lcd.print(h);
  lcd.print(F("%"));
  lcd.setCursor(0,1);
  lcd.print(F("Temp: "));
  lcd.print(temperature);
  lcd.print(F(" C")); 
  //pir
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);

  distance = duration * SOUND_VELOCITY/2;
  // Serial.print("Distance (cm): ");
  // Serial.println(distance);
  int sensorValue = analogRead(A0);
  //Serial.println(sensorValue);
  if(sensorValue<=300)
    lightning=HIGH;
  else
    lightning=LOW;
  // Reads the echoPin, returns the sound wave travel time in microseconds  
}
/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Distance is READ_WRITE variable, onDistanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDistanceChange()  {
  // Add your code here to act upon Distance change
}

/*
  Since CorridorLights is READ_WRITE variable, onCorridorLightsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCorridorLightsChange()  {
  // Add your code here to act upon CorridorLights change
  digitalWrite(LED1, corridorLights);
  digitalWrite(LED2, corridorLights);
}



/*
  Since DoorLock is READ_WRITE variable, onDoorLockChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDoorLockChange()  {
  if(doorLock){
    servo.write(90);
    delay(5000);
    servo.write(0);
  }
}